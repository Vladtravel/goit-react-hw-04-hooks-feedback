{"version":3,"sources":["components/Section.js","components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","item","type","onClick","Notification","message","App","state","onBtnCLick","option","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Object","keys","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAUeA,EAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKC,UAAU,YAAf,UACE,oBAAIA,UAAU,WAAd,SAA0BF,IACzBC,MCSUE,EAZI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,mCACE,qBAAIN,UAAU,iBAAd,UACE,qBAAIA,UAAU,iBAAd,mBAAsCE,KACtC,qBAAIF,UAAU,iBAAd,sBAAyCG,KACzC,qBAAIH,UAAU,iBAAd,kBAAqCI,EAArC,OACA,yCAAYC,KACZ,qDAAwBC,WCQfC,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAmBX,UAAU,WAAWY,KAAK,SAASC,QAASJ,EAAgBE,GAA/E,SACGA,GADUA,SCAJG,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KCgD5BC,G,kNA5CbC,MAAQ,CACNf,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPc,WAAa,SAACC,GAAD,OAAY,WACvB,EAAKC,UAAS,SAACC,GAAD,sBAAmBF,EAASE,EAAUF,GAAU,Q,EAGhEG,mBAAqB,kBAAM,EAAKL,MAAMf,KAAO,EAAKe,MAAMd,QAAU,EAAKc,MAAMb,K,EAC7EmB,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKR,MAAMf,MAAQ,EAAKe,MAAMf,KAAO,EAAKe,MAAMd,QAAU,EAAKc,MAAMb,KAAQ,M,4CAE3F,WACE,IAAMe,EAASO,OAAOC,KAAKC,KAAKX,OAC1BZ,EAAQuB,KAAKN,qBACbhB,EAAqBsB,KAAKL,kCAChC,EAA+BK,KAAKX,MAA5Bf,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OACE,qCACE,cAAC,EAAD,CAASN,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBU,QAASW,EAAQV,gBAAiBmB,KAAKV,eAG1D,cAAC,EAAD,CAASpB,MAAO,aAAhB,SACa,IAAVO,EACC,cAAC,EAAD,CAAcU,QAAQ,sBAEtB,cAAC,EAAD,CACEb,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GApChBuB,cCKHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de2b8587.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <div className=\"container\">\r\n    <h2 className=\"feedback\">{title}</h2>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <>\r\n    <ul className=\"statistic-list\">\r\n      <li className=\"statistic-item\">Good: {good}</li>\r\n      <li className=\"statistic-item\">Neutral: {neutral}</li>\r\n      <li className=\"statistic-item\">Bad: {bad} </li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}</li>\r\n    </ul>\r\n  </>\r\n);\r\n\r\nexport default Statistics;\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <ul>\r\n    {options.map((item) => (\r\n      <button key={item} className=\"btn-good\" type=\"button\" onClick={onLeaveFeedback(item)}>\r\n        {item}\r\n      </button>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import styles from \"./Statistics.module.css\";\r\n\r\nconst Notification = ({ message }) => <h3>{message}</h3>;\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Section from \"./components/Section\";\r\nimport Statistics from \"./components/Statistics\";\r\nimport FeedbackOptions from \"./components/FeedbackOptions\";\r\nimport Notification from \"./components/Notification\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  onBtnCLick = (option) => () => {\r\n    this.setState((prevState) => ({ [option]: prevState[option] + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () => this.state.good + this.state.neutral + this.state.bad;\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.round((this.state.good / (this.state.good + this.state.neutral + this.state.bad)) * 100);\r\n\r\n  render() {\r\n    const option = Object.keys(this.state);\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage();\r\n    const { good, neutral, bad } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Section title={\"Please leave feedback\"}>\r\n          <FeedbackOptions options={option} onLeaveFeedback={this.onBtnCLick} />\r\n        </Section>\r\n\r\n        <Section title={\"Statistics\"}>\r\n          {total === 0 ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positivePercentage={positivePercentage}\r\n            />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}